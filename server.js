import express from 'express';\nimport cors from 'cors';\nimport bcrypt from 'bcrypt';\nimport jwt from 'jsonwebtoken';\nimport dotenv from 'dotenv';\n\ndotenv.config();\n\nconst app = express();\nconst port = process.env.PORT || 3000;\nconst jwtSecret = process.env.JWT_SECRET || 'dev_secret';\n\napp.use(cors());\napp.use(express.json());\n\n// Demo users with hashed passwords generated at startup\nconst demoUsers = [\n  { id: 1, name: 'Alice Tourist', email: 'alice@example.com', plainPassword: 'password123' },\n  { id: 2, name: 'Bob Visitor', email: 'bob@example.com', plainPassword: 'welcome123' }\n].map((u) => ({ ...u, passwordHash: bcrypt.hashSync(u.plainPassword, 10) }));\n\nfunction findUserByEmail(email) {\n  return demoUsers.find((u) => u.email.toLowerCase() === String(email).toLowerCase());\n}\n\napp.get('/health', (_req, res) => {\n  res.json({ status: 'ok' });\n});\n\napp.post('/api/auth/login', (req, res) => {\n  const { email, password } = req.body || {};\n  if (!email || !password) {\n    return res.status(400).json({ message: 'Email and password are required' });\n  }\n\n  const user = findUserByEmail(email);\n  if (!user) {\n    return res.status(401).json({ message: 'Invalid credentials' });\n  }\n\n  const isValid = bcrypt.compareSync(password, user.passwordHash);\n  if (!isValid) {\n    return res.status(401).json({ message: 'Invalid credentials' });\n  }\n\n  const token = jwt.sign({ sub: user.id, email: user.email, role: 'tourist' }, jwtSecret, { expiresIn: '1h' });\n  return res.json({ token, user: { id: user.id, name: user.name, email: user.email } });\n});\n\napp.listen(port, () => {\n  console.log(Server running on http://localhost:);\n});
